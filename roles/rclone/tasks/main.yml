#########################################################################
# Title:         Cloudbox: Rclone Role                                  #
# Author(s):     l3uddz, desimaniac                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Install common packages
  apt: "name={{item}} state=present"
  with_items:
    - unzip
    - man-db
    - jq

- name: Create rclone directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
  with_items:
    - "/home/{{user}}/.config"
    - "/home/{{user}}/.config/rclone"

- name: "Legacy rclone uninstaller"
  include_tasks: "legacy_uninstaller.yml"

- name: Cleanup rclone tmp path
  shell: rm -rf /tmp/rclone-*-linux-amd64
  args:
    warn: no

- name: Check if rclone version was specified
  set_fact:
    rclone_version_is_specified: "{{ true if not (
        (rclone is undefined)
        or
        (rclone is none)
        or
        (rclone | trim == '')
        or
        (rclone.version is undefined)
        or
        (rclone.version is none)
        or
        (rclone.version | trim == '')
      )
      else false }}"

- name: Display rclone version specified
  debug:
    msg: "Rclone version specified: {{ rclone.version }}"
  when: rclone_version_is_specified

- name: Check if github rate limit is active
  shell: curl -s https://api.github.com/repos/ncw/rclone/git/refs/tags | head -n 4
  register: github_rate_limit_check

- name: Set 'github_rate_limited'
  set_fact:
    github_rate_limited: "{{ 'API rate limit exceeded' in github_rate_limit_check.stdout }}"

- name: Display message about GitHub API limit
  debug:
    msg: "GitHub API limit has been reached. Unable to check if Rclone version {{ rclone.version }} is available. Will install the latest available version instead."
  when: github_rate_limited

- name: Set vars for current version
  set_fact:
    rclone_version_specified: "{{ 'latest' if (github_rate_limited) else (rclone.version) }}"
    rclone_download_url: "https://downloads.rclone.org/rclone-current-linux-amd64.zip"
  when: (not rclone_version_is_specified) or (rclone.version == 'latest') or (rclone.version == 'current') or (github_rate_limited)

- name: Set vars for beta version
  set_fact:
    rclone_version_specified: "{{ rclone.version }}"
    rclone_download_url: "https://beta.rclone.org/rclone-beta-latest-linux-amd64.zip"
  when: (rclone_version_is_specified) and (rclone.version == 'beta')

- name: Specified version tasks
  block:

  - name: Set temp 'rclone_version_specified0' var for specified version
    set_fact:
      rclone_version_specified0: "{{ ('%.2f'|format(rclone.version|float)) if ((rclone.version | type_debug == 'float') or (rclone.version | type_debug == 'int')) else ( '%.2f'|format((rclone.version | regex_replace('(^v\\.|^v)', '')) | float) )}}"

  - name: Check if version '{{ rclone_version_specified0 }}' is available
    shell: curl -s https://api.github.com/repos/ncw/rclone/git/refs/tags | jq -r  '.[] | .ref' | sed 's/\/\?refs\/tags\/v//g' | grep '{{ rclone_version_specified0 }}'
    register: rclone_version_specified0_check
    failed_when: rclone_version_specified0_check.rc > 1

  - name: Set vars for specified version if available
    set_fact:
      rclone_version_specified: "{{ rclone_version_specified0 }}"
      rclone_download_url: 'https://downloads.rclone.org/v{{ rclone_version_specified0 }}/rclone-v{{ rclone_version_specified0 }}-linux-amd64.zip'
    when: (rclone_version_specified0_check.stdout | trim != '')

  - name: Display message if specified version is not available
    debug:
      msg: "Rclone version {{ rclone_version_specified0 }} is not available. Will install the latest available version instead."
    when: (rclone_version_specified0_check.stdout | trim == '')

  - name: Set vars for specified version if not available
    set_fact:
      rclone_version_specified: "latest"
      rclone_download_url: "https://downloads.rclone.org/rclone-current-linux-amd64.zip"
    when: (rclone_version_specified0_check.stdout | trim == '')

  when: (rclone_version_is_specified) and not ((rclone.version == 'beta') or (rclone.version == 'latest') or (rclone.version == 'current')) and (not github_rate_limited)


- name: Display rclone version being installed
  debug:
    msg: "Installing Rclone version: {{ rclone_version_specified }}"
  when: rclone_version_is_specified

- name: "Download and unarchive rclone"
  unarchive:
    src: "{{ rclone_download_url }}"
    dest: /tmp
    copy: no
    validate_certs: no

- name: Find rclone tmp dir
  shell: ls -d /tmp/rclone-*-linux-amd64
  register: rclone_tmp_dir

- name: Copy binary to /usr/bin/rclone
  copy:
    src: "{{ rclone_tmp_dir.stdout }}/rclone"
    dest: "/usr/bin/rclone"
    mode: 0775
    owner: root
    group: root
    force: yes

- name: Make dir for local manpages
  file:
    path: '/usr/local/share/man/man1'
    state: directory
    mode: 0775
    owner: root
    group: root

- name: Copy manpage
  copy:
    src: "{{ rclone_tmp_dir.stdout }}/rclone.1"
    dest: /usr/local/share/man/man1/rclone.1
    mode: 0664
    owner: root
    group: root

- name: Install manpage
  shell: mandb
  changed_when: false

- name: Get rclone version
  shell: rclone --version | head -n 1 | awk '{ print substr($2, 2) }'
  register: rclone_version
  ignore_errors: yes

- name: "Display rclone version"
  debug:
    msg: "Rclone version {{rclone_version.stdout}} installed."

- name: "Check if 'rclone.conf' exists in '{{playbook_dir}}' folder"
  stat:
    path: "{{playbook_dir}}/rclone.conf"
  register: rclone_conf_playbook_dir

- name: "Check if 'rclone.conf' exists in default location"
  stat:
    path: "/home/{{user}}/.config/rclone/rclone.conf"
  register: rclone_conf_default_path

- name: "Backup existing 'rclone.conf' at default location (if it exists) 1/2"
  copy:
    src: "/home/{{user}}/.config/rclone/rclone.conf"
    dest: "/home/{{user}}/.config/rclone/rclone.conf.bak"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  when: rclone_conf_playbook_dir.stat.exists and rclone_conf_default_path.stat.exists

- name: "Backup existing 'rclone.conf' at default location (if it exists) 2/2"
  file:
    path: "/home/{{user}}/.config/rclone/rclone.conf"
    state: absent
  when: rclone_conf_playbook_dir.stat.exists and rclone_conf_default_path.stat.exists

- name: "Copy 'rclone.conf' from '{{playbook_dir}}' folder to default location"
  copy:
    src: "{{playbook_dir}}/rclone.conf"
    dest: "/home/{{user}}/.config/rclone/rclone.conf"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  when: rclone_conf_playbook_dir.stat.exists

- name: "Remove the 'rclone.conf' copy from the '{{playbook_dir}}' folder"
  file: "path={{item}} state=absent"
  with_items:
    - "{{playbook_dir}}/rclone.conf"
  when: rclone_conf_playbook_dir.stat.exists

- name: "Check if 'rclone.conf' exists at default location"
  stat:
    path: "/home/{{user}}/.config/rclone/rclone.conf"
  register: rclone_conf_default_path_2

- name: "Do the following block when 'rclone.conf' is not at default location"
  block:

  - name: "Find location of 'rclone.conf' when not at default location"
    shell: rclone config file
    register: rclone_conf_current_location

  - name: "Copy 'rclone.conf' to default location if found elsewhere"
    copy:
      src: "{{ rclone_conf_current_location.stdout_lines | last }}"
      dest: "/home/{{user}}/.config/rclone/rclone.conf"
      owner: "{{user}}"
      group: "{{user}}"
      mode: 0775
      force: yes
    when: rclone_conf_current_location.stdout.find('Configuration file doesn\'t exist') == -1

  - name: "Remove that other 'rclone.conf' copy"
    file:
      path: "{{ rclone_conf_current_location.stdout_lines | last }}"
      state: absent
    when: rclone_conf_current_location.stdout.find('Configuration file doesn\'t exist') == -1

  - name: "Create blank 'rclone.conf' if not found elsewhere"
    file:
      path: "/home/{{user}}/.config/rclone/rclone.conf"
      state: touch
      mode: 0775
      owner: "{{user}}"
      group: "{{user}}"
    when: rclone_conf_current_location.stdout.find('Configuration file doesn\'t exist') != -1

  when: not rclone_conf_default_path_2.stat.exists
